// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: dept.sql

package db

import (
	"context"
)

const createDept = `-- name: CreateDept :one
INSERT INTO dept (dname, loc)
VALUES ($1, $2)
RETURNING deptno, dname, loc
`

type CreateDeptParams struct {
	Dname string `json:"dname"`
	Loc   string `json:"loc"`
}

func (q *Queries) CreateDept(ctx context.Context, arg CreateDeptParams) (Dept, error) {
	row := q.db.QueryRowContext(ctx, createDept, arg.Dname, arg.Loc)
	var i Dept
	err := row.Scan(&i.Deptno, &i.Dname, &i.Loc)
	return i, err
}

const deleteGetDept = `-- name: DeleteGetDept :one
DELETE FROM dept
 WHERE deptno = $1
RETURNING deptno, dname, loc
`

func (q *Queries) DeleteGetDept(ctx context.Context, deptno int32) (Dept, error) {
	row := q.db.QueryRowContext(ctx, deleteGetDept, deptno)
	var i Dept
	err := row.Scan(&i.Deptno, &i.Dname, &i.Loc)
	return i, err
}

const getDept = `-- name: GetDept :one
SELECT deptno, dname, loc
  FROM dept
 WHERE deptno = $1 LIMIT 1
`

func (q *Queries) GetDept(ctx context.Context, deptno int32) (Dept, error) {
	row := q.db.QueryRowContext(ctx, getDept, deptno)
	var i Dept
	err := row.Scan(&i.Deptno, &i.Dname, &i.Loc)
	return i, err
}

const updateGetDept = `-- name: UpdateGetDept :one
UPDATE dept
   SET dname = $1,
       loc = $2
 WHERE deptno = $3
RETURNING deptno, dname, loc
`

type UpdateGetDeptParams struct {
	Dname  string `json:"dname"`
	Loc    string `json:"loc"`
	Deptno int32  `json:"deptno"`
}

func (q *Queries) UpdateGetDept(ctx context.Context, arg UpdateGetDeptParams) (Dept, error) {
	row := q.db.QueryRowContext(ctx, updateGetDept, arg.Dname, arg.Loc, arg.Deptno)
	var i Dept
	err := row.Scan(&i.Deptno, &i.Dname, &i.Loc)
	return i, err
}
