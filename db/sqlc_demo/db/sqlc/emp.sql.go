// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: emp.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createEmp = `-- name: CreateEmp :one
INSERT INTO emp (ename, job, mgr, hiredate, sal, comm, deptno)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING empno, ename, job, mgr, hiredate, sal, comm, deptno
`

type CreateEmpParams struct {
	Ename    string         `json:"ename"`
	Job      sql.NullString `json:"job"`
	Mgr      sql.NullInt32  `json:"mgr"`
	Hiredate sql.NullTime   `json:"hiredate"`
	Sal      sql.NullString `json:"sal"`
	Comm     sql.NullString `json:"comm"`
	Deptno   int32          `json:"deptno"`
}

func (q *Queries) CreateEmp(ctx context.Context, arg CreateEmpParams) (Emp, error) {
	row := q.db.QueryRowContext(ctx, createEmp,
		arg.Ename,
		arg.Job,
		arg.Mgr,
		arg.Hiredate,
		arg.Sal,
		arg.Comm,
		arg.Deptno,
	)
	var i Emp
	err := row.Scan(
		&i.Empno,
		&i.Ename,
		&i.Job,
		&i.Mgr,
		&i.Hiredate,
		&i.Sal,
		&i.Comm,
		&i.Deptno,
	)
	return i, err
}

const deleteEmp = `-- name: DeleteEmp :exec
DELETE FROM emp
 WHERE empno = $1
`

func (q *Queries) DeleteEmp(ctx context.Context, empno int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmp, empno)
	return err
}

const deleteGetEmp = `-- name: DeleteGetEmp :one
DELETE FROM emp
 WHERE empno = $1
RETURNING empno, ename, job, mgr, hiredate, sal, comm, deptno
`

func (q *Queries) DeleteGetEmp(ctx context.Context, empno int32) (Emp, error) {
	row := q.db.QueryRowContext(ctx, deleteGetEmp, empno)
	var i Emp
	err := row.Scan(
		&i.Empno,
		&i.Ename,
		&i.Job,
		&i.Mgr,
		&i.Hiredate,
		&i.Sal,
		&i.Comm,
		&i.Deptno,
	)
	return i, err
}

const getEmp = `-- name: GetEmp :one
SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno
  FROM emp
 WHERE empno = $1 LIMIT 1
`

func (q *Queries) GetEmp(ctx context.Context, empno int32) (Emp, error) {
	row := q.db.QueryRowContext(ctx, getEmp, empno)
	var i Emp
	err := row.Scan(
		&i.Empno,
		&i.Ename,
		&i.Job,
		&i.Mgr,
		&i.Hiredate,
		&i.Sal,
		&i.Comm,
		&i.Deptno,
	)
	return i, err
}

const listEmpByEmpnoArray = `-- name: ListEmpByEmpnoArray :many
SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno
  FROM emp
 WHERE empno = ANY($1::int[])
`

func (q *Queries) ListEmpByEmpnoArray(ctx context.Context, dollar_1 []int32) ([]Emp, error) {
	rows, err := q.db.QueryContext(ctx, listEmpByEmpnoArray, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Emp
	for rows.Next() {
		var i Emp
		if err := rows.Scan(
			&i.Empno,
			&i.Ename,
			&i.Job,
			&i.Mgr,
			&i.Hiredate,
			&i.Sal,
			&i.Comm,
			&i.Deptno,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmps = `-- name: ListEmps :many
SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno
  FROM emp
 LIMIT $1
OFFSET $2
`

type ListEmpsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmps(ctx context.Context, arg ListEmpsParams) ([]Emp, error) {
	rows, err := q.db.QueryContext(ctx, listEmps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Emp
	for rows.Next() {
		var i Emp
		if err := rows.Scan(
			&i.Empno,
			&i.Ename,
			&i.Job,
			&i.Mgr,
			&i.Hiredate,
			&i.Sal,
			&i.Comm,
			&i.Deptno,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGetEmp = `-- name: UpdateGetEmp :one
UPDATE emp
  SET ename = $1,
      job = $2,
      mgr = $3,
      hiredate = $4,
      sal = $5,
      comm = $6,
      deptno = $7
WHERE empno = $8
RETURNING empno, ename, job, mgr, hiredate, sal, comm, deptno
`

type UpdateGetEmpParams struct {
	Ename    string         `json:"ename"`
	Job      sql.NullString `json:"job"`
	Mgr      sql.NullInt32  `json:"mgr"`
	Hiredate sql.NullTime   `json:"hiredate"`
	Sal      sql.NullString `json:"sal"`
	Comm     sql.NullString `json:"comm"`
	Deptno   int32          `json:"deptno"`
	Empno    int32          `json:"empno"`
}

func (q *Queries) UpdateGetEmp(ctx context.Context, arg UpdateGetEmpParams) (Emp, error) {
	row := q.db.QueryRowContext(ctx, updateGetEmp,
		arg.Ename,
		arg.Job,
		arg.Mgr,
		arg.Hiredate,
		arg.Sal,
		arg.Comm,
		arg.Deptno,
		arg.Empno,
	)
	var i Emp
	err := row.Scan(
		&i.Empno,
		&i.Ename,
		&i.Job,
		&i.Mgr,
		&i.Hiredate,
		&i.Sal,
		&i.Comm,
		&i.Deptno,
	)
	return i, err
}
